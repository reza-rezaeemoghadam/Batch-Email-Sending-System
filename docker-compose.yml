services:
  django-app:
    container_name: django-application
    build:
      context: ./
    env_file:
      - .env
    command: ["/app/django-app/core/scripts/start.sh"]
    depends_on:
      - postgres
      - rabbitmq
    volumes:
      - ./:/app/django-app
    networks:
      - django-app-network
    expose:
      - "${HTTP_PORT}:8000"
    ports:
      - "${HTTP_PORT}:8000"
    restart: on-failure

  postgres:
    container_name: postgres
    image: postgres:15.2-alpine
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - django-app-postgres-data:/var/lib/postgresql/data
    networks:
      - django-app-network
    ports:
      - "${POSTGRES_PORT}:5432"
    restart: on-failure

  rabbitmq:
    container_name: rabbitmq
    image: "rabbitmq:management"
    ports:
      - "${RABBITMQ_MANAGEMENT_UI_PORT}:15672"
      - "${RABBITMQ_MESSAGING_PORT}:5672"
    networks:
      - django-app-network
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    restart: on-failure

  celery:
    container_name: celery
    build:
      context: ./
    env_file:
      - .env
    command: ["celery", "--app", "src", "worker", "--loglevel=info"]
    depends_on:
      - django-app
      - rabbitmq
    volumes:
      - ./:/app/django-app
    networks:
      - django-app-network
    restart: on-failure

volumes:
  django-app-postgres-data:
    driver: local

networks:
  django-app-network:
    driver: bridge
